package com.connorjbracy.pixmapblendtest;

import global.G;


public class GamePixel {

	private G._RGB color;
	private float colorIntensity;

	public GamePixel(G._RGB color) {
		this.color = color;
		this.colorIntensity = G.i().PIX_WEIGHT_GRAD;
	}
	
	public G._RGB getColor() { return color; }
		
	public void setColor(G._RGB newColor, float colorIntensity) {
		color = newColor;
		this.colorIntensity = colorIntensity;
	}
	
	public void incIntensity() { colorIntensity += G.i().PIX_WEIGHT_GRAD; 
									if(colorIntensity > 1.0f) colorIntensity = 1.0f; } 
	public void decIntensity() { colorIntensity -= G.i().PIX_WEIGHT_GRAD; 
									if(colorIntensity < 0.0f) colorIntensity = 0.0f; }
	
	public float getInitColorGrad(int xCoord, int yCoord) {
		float retVal = 1.0f - (colorIntensity * (float)Math.sqrt( (xCoord * xCoord) + (yCoord * yCoord) ) );
		return ((retVal < 0.0f)? 0.0f : retVal);
	}
	
	/* Calculates the value the color being 
	 * added should be weighted by and returns 
	 * it to be reflected in the buffer */
	public float getColorVal(int xOffset, int yOffset) {
		float retVal = 1.0f - (G.i().RAD_GRAD * (float)Math.sqrt( (xOffset * xOffset) + (yOffset * yOffset) ) );
		retVal *= colorIntensity;
		return ((retVal < 0.0f)? 0.0f : retVal);
	}
	
}
